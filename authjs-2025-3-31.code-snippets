{
	"Auth.js Credentials Provider with JWT and Comments": {
		"prefix": "authJsCredentialProviderJwt",
		"scope": "javascript,typescript",
		"body": [
			"//import bcrypt from 'bcryptjs';",
			"//import { db } from '~/server/db';",
			"//import { signInSchema } from '~/schemas';",
			"providers: [",
			"  Credentials({",
			"    credentials: {",
			"      email: {},",
			"      password: {},",
			"    },",
			"    authorize: async (credentials) => {",
			"      try {",
			"        const { email, password } = await signInSchema.parseAsync(credentials);",
			"        const user = await db.user.findUnique({ where: { email } });",
			"        const passwordMatch = await bcrypt.compare(password, user?.password ?? '');",
			"        if (!passwordMatch) {",
			"          return null;",
			"        }",
			"        return user;",
			"      } catch (error) {",
			"        return null;",
			"      }",
			"    },",
			"  }),",
			"  // DiscordProvider,",
			"  /**",
			"   * ...add more providers here.",
			"   *",
			"   * Most other providers require a bit more work than the Discord provider. For example, the",
			"   * GitHub provider requires you to add the `refresh_token_expires_in` field to the Account",
			"   * model. Refer to the NextAuth.js docs for the provider you want to use. Example:",
			"   *",
			"   * @see https://next-auth.js.org/providers/github",
			"   */",
			"],",
			"session: {",
			"  strategy: 'jwt',",
			"},",
			"callbacks: {",
			"  session: ({ session, user, token }) => ({",
			"    ...session,",
			"    user: {",
			"      ...session.user,",
			"      id: token.sub,",
			"    },",
			"  }),",
			"},"
		],
		"description": "Setup for Auth.js Credentials Provider with JWT session strategy, including commented-out imports"
	},
	"Auth.js Actions": {
		"prefix": "authjsAction",
		"body": [
			"\"use server\";",
			"",
			"import { isValid, ZodError } from \"zod\";",
			"import { signUpSchema } from \"~/schemas\";",
			"import { db } from \"~/server/db\";",
			"import bcrypt from \"bcryptjs\";",
			"import { redirect } from \"next/navigation\";",
			"import { signIn, signOut } from \"~/server/auth\";",
			"import { AuthError } from \"next-auth\";",
			"",
			"export async function signout() {",
			"  await signOut();",
			"}",
			"",
			"export async function authenticate(",
			"  prevState: string | undefined,",
			"  formData: FormData,",
			") {",
			"  try {",
			"    await signIn(\"credentials\", formData);",
			"  } catch (error) {",
			"    if (error instanceof AuthError) {",
			"      switch (error.type) {",
			"        case \"CredentialsSignin\":",
			"          return \"Invalid credentials\";",
			"        default:",
			"          return \"Something went wrong\";",
			"      }",
			"    }",
			"    throw error;",
			"  }",
			"}",
			"",
			"export async function register(",
			"  prevState: string | undefined,",
			"  formData: FormData,",
			") {",
			"  try {",
			"    const { email, password } = await signUpSchema.parseAsync({",
			"      email: formData.get(\"email\"),",
			"      password: formData.get(\"password\"),",
			"    });",
			"",
			"    const user = await db.user.findUnique({",
			"      where: {",
			"        email: email,",
			"      },",
			"    });",
			"",
			"    if (user) {",
			"      return \"User already exists\";",
			"    }",
			"",
			"    const hash = await bcrypt.hash(password, 10);",
			"",
			"    await db.user.create({",
			"      data: {",
			"        email: email,",
			"        password: hash,",
			"      },",
			"    });",
			"  } catch (error) {",
			"    if (error instanceof ZodError) {",
			"      return error.errors.map((error) => error.message).join(\", \");",
			"    }",
			"  }",
			"",
			"  redirect(\"/signin\");",
			"}"
		],
		"description": "Authentication actions for sign-in, sign-out, and registration"
	}
}