{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"1. Container Custom": {
		"scope": "html,javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "tw-customContainer",
		"body": [
			"max-w-${1:[2560px]} px-6 lg:px-20 xl:px-[85px] mx-auto"
		],
		"description": "Custom Container in tailwindcss"
	},
	"ClassName Snippet": {
		"scope": "html,javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "className",
		"body": [
			"className={`${1}`}"
		],
		"description": "Snippet for a predefined className with Tailwind CSS classes"
	},
	"ClassName Snippet with twMerge": {
		"scope": "html,javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "classNameTwMerge",
		"body": [
			"className={twMerge(${1})}"
		],
		"description": "Snippet for a predefined className with Tailwind CSS classes"
	},
	"Tailwind Text Gradient": {
		"prefix": "twTextGradient",
		"body": [
			"bg-gradient-to-r from-${1:purple-400} to-${2:pink-400} bg-clip-text text-transparent"
		],
		"description": "Snippet for Tailwind CSS gradient text with customizable from and to colors"
	},
	"2. Tailwind Custom Utilities": {
		"scope": "javascript,typescript",
		"prefix": "tw-addUtils",
		"body": [
			"({ addUtilities } ${1: :any}) => {",
			"  addUtilities({",
			"    '.container-custom': {",
			"      '@apply max-w-none': {},",
			"    },",
			"    '.h2': {",
			"      '@apply scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl': {},",
			"    },",
			"    '.h1': {",
			"      '@apply scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl': {},",
			"    },",
			"    '.p': {",
			"      '@apply text-base md:text-xl': {},",
			"    },",
			"    '.mdMaxWidth': {",
			"      '@apply w-full max-w-[614px] lg:max-w-none': {},",
			"    },",
			"    '.container-left': {",
			"      '@apply pl-4 lg:pl-10 xl:pl-[42px]': {},",
			"    },",
			"    '.container-right': {",
			"      '@apply pr-4 lg:pr-10 xl:pr-[42px]': {},",
			"    },",
			"    '.mt-element': {",
			"      '@apply mt-3 md:mt-4 lg:mt-5': {},",
			"    },",
			"    '.my-element': {",
			"      '@apply my-3 md:my-4 lg:my-5': {},",
			"    },",
			"    '.space-element': {",
			"      '@apply space-y-4 md:space-y-5 lg:space-y-6': {},",
			"    },",
			"    '.my-element-big': {",
			"      '@apply my-5 md:my-7 lg:my-8': {},",
			"    },",
			"    '.mt-section': {",
			"      '@apply mt-16 lg:mt-20': {},",
			"    }",
			"  });",
			"}"
		],
		"description": "Adds Tailwind custom utilities to a PostCSS plugin"
	},
	"3. Tailwind Grid Component": {
		"prefix": "tw-grid",
		"body": [
			"<section className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>",
			"  {${1:projects}.map((project, index) => (",
			"    <div className='' key={project._id}>",
			"      <h1>{project._id}</h1>",
			"    </div>",
			"  ))}",
			"</section>"
		],
		"description": "Tailwind CSS grid component for mapping over a projects array"
	},
	"4.Tailwind CSS Screen Configuration": {
		"prefix": "tailwindScreenConfig",
		"body": [
			"screens: {",
			"  sm: \"375px\",",
			"  md: \"768px\",",
			"  lg: \"1200px\",",
			"},"
		],
		"description": "Insert Tailwind CSS screen configuration without comments.",
		"scope": "typescript,javascript"
	},
	"5. Tailwind CSS Container Configuration": {
		"prefix": "tailwindContainerConfig",
		"body": [
			"container: {",
			"  // center: true,",
			"  padding: {",
			"    DEFAULT: \"${1:1rem}\",",
			"    md: \"${2:2rem}\",",
			"    lg: \"${3:4rem}\",",
			"  },",
			"},"
		],
		"description": "Insert Tailwind CSS container configuration with customizable padding."
	},
	"6.Sphereal Underline": {
		"prefix": "maskUnderline",
		"body": [
			"/* import underlineImage from \"@/assets/images/underline.svg?url\"; */",
			"<span className=\"relative\">",
			"  <span>Sphereal</span>",
			"  <span",
			"    className=\"absolute w-full left-0 top-full -translate-y-1/2 h-4 bg-gradient-to-r from-violetC via-fuchsiaC to-tealC\"",
			"    style={{",
			"      maskImage: `url(${underlineImage.src})`,",
			"      maskSize: \"contain\",",
			"      maskPosition: \"center\",",
			"      maskRepeat: \"no-repeat\",",
			"    }}",
			"  ></span>",
			"</span>"
		],
		"description": "Snippet for Sphereal underline with gradient and mask"
	},
	"Div with ClassName": {
		"prefix": "divWithClassName",
		"body": [
			"<div className={`$1`}>$2</div>"
		],
		"description": "Snippet for a div element with className and content placeholders"
	},
	"center items using flex": {
		"prefix": "flexCenter",
		"body": [
			"${1|flex,inline-flex|} justify-center items-center"
		],
		"description": "Snippet for a div element with className and content placeholders"
	},
	"Dark Body Class Name": {
		"prefix": "darkBodyClassName",
		"scope": "html,javascript,typescript,javascriptreact,typescriptreact",
		"body": [
			"bg-gray-900 text-white antialiased"
		],
		"description": "Apply dark mode styles to a component"
	}
}