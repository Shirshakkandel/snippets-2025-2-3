{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Setup Browser extension command": {
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json,markdown",
		"prefix": "extensionSetup",
		"body": [
			"//prefix =>extensionSetup ",
			"//Enable developer mode and  load Unpacked going to below link",
			"// ${1|edge,chrome|}://extensions/${2:?id=${3:ipkffmabfcdcmknnobgleeleagejmb}}"
		],
		"description": "Log output to console"
	},
	"Manifest JSON Key Notes": {
		"prefix": "manifestNotes",
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json,markdown",
		"body": [
			"//prefix=> manifestNotes",
			"// manifest.json is required in every browser extension",
			"// permissions: define what features your extension can access",
			"// - \"storage\": to save data locally using chrome.storage",
			"// - \"tabs\": to access browser tab info",
			"// - \"activeTab\": to interact with the currently active tab",
			"// - \"scripting\": to programmatically inject scripts",
			"// - \"notifications\": to show system notifications",
			"// - \"downloads\": to access download functionality",
			"// background.service_worker:",
			"// - Runs in the background (even when no tab is open)",
			"// - Handles events like tab changes, message passing, alarms, etc.",
			"// action:",
			"// - Defines the icon shown in the toolbar",
			"// - Can include:",
			"//    - default_icon: icon file paths for different sizes",
			"//    - default_title: tooltip text on hover",
			"//    - default_popup: popup HTML that appears when clicked",
			"// content_scripts:",
			"// - Scripts that automatically run on specified pages",
			"// - \"matches\": URLs where the script should run",
			"// - \"js\": JavaScript files to inject",
			"// - Useful for modifying or interacting with webpage content directly"
		],
		"description": "Key explanations for manifest.json fields in a browser extension"
	},
	"Set Badge Text on Installation": {
		"prefix": "OnInstallSetBadgeExtension",
		"body": [
			"//prefix=>OnInstallSetBadgeExtension ",
			"${1|browser,chrome|}.runtime.onInstalled.addListener(() => {",
			"  ${1|browser,chrome|}.action.setBadgeText({",
			"    text: \"OFF\",",
			"  });",
			"});"
		],
		"description": "Sets the badge text to 'OFF' when the extension is installed or updated."
	},
	"Send Message with chrome.tabs.sendMessage": {
		"prefix": "tabSendMessageExten",
		"body": [
			"//prefix=>tabSendMessage ",
			"${1|browser,chrome|}.tabs.sendMessage(tabId, {",
			"  type: '${2:NEW}',",
			"  ${3:other things to send}",
			"});"
		],
		"description": "Send a message using chrome.tabs.sendMessage with dynamic tabId, type, and videoId."
	},
	"chrome.tabs.onUpdated.addListener": {
		"prefix": "tabOnUpdate",
		"body": [
			"//prefix=>tabOnUpdate ",
			"${1|browser,chrome|}.tabs.onUpdated.addListener((tabId,tab)=>  {",
			"${1://things to be change}",
			"});"
		],
		"description": "Send a message using chrome.tabs.sendMessage with dynamic tabId, type, and videoId."
	},
	"Chrome Runtime onMessage Listener": {
		"prefix": "runtimeOnMessage",
		"body": [
			"${1|browser,chrome|}.runtime.onMessage.addListener((obj, sender, response) => {",
			"  const { type ${1:} } = obj;",
			"});"
		],
		"description": "Insert a chrome.runtime.onMessage.addListener function."
	},
	"Chrome manifest example": {
		"prefix": "manifestExample",
		"body": [
			"{",
			"  \"manifest_version\": ${1:3},",
			"  \"name\": \"${2:Extension Name}\",",
			"  \"version\": \"${3:1.0.0}\",",
			"  \"description\": \"${4:Description of the extension}\",",
			"  \"permissions\": [",
			"    \"${5|tabs,activeTab,storage,alarms,bookmarks,cookies,debugger,geolocation,download,notification|}\",",
			"    \"${6|tabs,activeTab,storage,alarms,bookmarks,cookies,debugger,geolocation,download,notification|}\",",
			"  ],",
			"  \"background\": {",
			"    \"service_worker\": \"${7:background.js}\"",
			"  },",
			"  \"action\": {",
			"    \"default_popup\": \"${8:popup.html}\",",
			"    \"default_icon\": {",
			"      \"16\": \"${9:icon16.png}\",",
			"      \"48\": \"${10:icon48.png}\",",
			"      \"128\": \"${11:icon128.png}\"",
			"    }",
			"  },",
			"  \"content_scripts\": [",
			"    {",
			"      \"matches\": [\"${12|<all_urls>,https://*.youtube.com/*|}\"],",
			"      \"js\": [\"${13:content.js}\"]",
			"    }",
			"  ],",
			"  \"icons\": {",
			"    \"16\": \"${14:icon16.png}\",",
			"    \"48\": \"${15:icon48.png}\",",
			"    \"128\": \"${16:icon128.png}\"",
			"  }",
			"}"
		],
		"description": "A template for a Chrome extension manifest.json file."
	},
	"actionGetBadgeText": {
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json",
		"prefix": "actionGetBadgeText",
		"body": [
			"const prevState = await ${1|browser,chrome|}.action.getBadgeText({ tabId: ${2:tab.id} });"
		],
		"description": "Get the badge text for the specified tab."
	},
	"actionSetBadgeText": {
		"prefix": "actionSetBadgeText",
		"body": [
			"await ${1|browser,chrome|}.action.setBadgeText({",
			"  tabId: ${2:tab.id},",
			"  text: ${3:nextState},",
			"});"
		],
		"description": "Sets the badge text for the specified tab."
	},
	"Insert CSS Snippet": {
		"prefix": "scriptingInsertRemoveCssExtension",
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json",
		"body": [
			"await ${1|browser,chrome|}.scripting.${2|insertCSS,removeCSS|}({",
			"  files: ['focus-mode.css'],",
			"  target: { tabId: ${3:tab.id}},",
			"});"
		],
		"description": "Inserts CSS file into the active tab."
	},
	"chromeStorageGet": {
		"prefix": "getStorageLocal",
		"body": [
			"${1|browser,chrome|}.storage.${2|sync,local|}.get(['${3:key}'], res => {",
			"  const ${4:variable} = res.${3:key} ?? ${5:defaultValue};",
			"  $0",
			"});"
		],
		"description": "Snippet for chrome.storage.local.get with placeholders"
	},
	"storageLocalSet": {
		"prefix": "storageLocalSetExtension",
		"body": [
			"${1|browser,chrome|}.storage.local.set({",
			"  ${2:key}: ${3:value},",
			"  $0",
			"});"
		],
		"description": "Snippet for chrome.storage.local.set with placeholders"
	}
}