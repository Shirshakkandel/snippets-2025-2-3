{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"Content Layer installation": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact,json",
		"prefix": "contentLayerInstall",
		"body": [
			"// ${1|pnpm,yarn,npm|} install contentlayer2 next-contentlayer2 date-fns"
		],
	},
	"Dynamic Import Statement": {
		"prefix": "jsimport",
		"body": [
			"import ${2|defaultExport,{ namedExport }|} from '${1:module-name}';"
		],
		"description": "Snippet for dynamic imports with default and named exports"
	},
	"Console log": {
		"prefix": "clg",
		"body": [
			"console.log(${1:'log element'})"
		]
	},
	"packageLintTscCheck": {
		"prefix": "packageLintTscCheck",
		"body": [
			"\"prepare\": \"husky install\",",
			"\"ts\": \"npx tsc\",",
			"\"test\": \"next lint && npx tsc\",",
			"\"check-env\": \"node scripts/checkEnv.js\""
		],
		"description": "Snippet for package.json scripts: prepare, ts, test, check-env"
	},
	"husky": {
		"prefix": "husky",
		"body": [
			"// pnpm add -D husky",
			"// npx husky init",
			"\"husky\": {",
			"  \"hook\": {",
			"    \"pre-commit\": \"pnpm run test && pnpm run check-env\"",
			"  }",
			"}"
		],
		"description": "Snippet for husky configuration in package.json"
	},
	"scopeWebsite": {
		"prefix": "scopeReact",
		"body": [
			"\"scope\": \"javascriptreact,typescriptreact,json\","
		],
		"description": "Tailwind CSS navigation item styling"
	},
	"scopeTypeScript": {
		"prefix": "scopeTypeScript",
		"body": [
			"\"scope\": \"javascript,typescript\","
		],
		"description": "Tailwind CSS navigation item styling"
	},
	"scopeReact": {
		"prefix": "scopeWebsite",
		"body": [
			"\"scope\": \"html,css,javascript,typescript,javascriptreact,typescriptreact,json\","
		],
		"description": "Tailwind CSS navigation item styling"
	},
	"Prettier Config": {
		"prefix": "prettierConfig",
		"body": [
			"// .prettierrc or .prettierrc.json",
			"// pnpm add -D prettier prettier-plugin-tailwindcss",
			"{",
			"  \"plugins\": [\"prettier-plugin-tailwindcss\"],",
			"  \"singleQuote\": true,",
			"  \"tabWidth\": 2,",
			"  \"trailingComma\": \"all\",",
			"  \"jsxBracketSameLine\": false,",
			"  \"arrowParens\": \"avoid\",",
			"  \"printWidth\": 70,",
			"  \"bracketSameLine\": false,",
			"  \"overrides\": [",
			"    {",
			"      \"files\": \"*.json\",",
			"      \"options\": {",
			"        \"parser\": \"json\",",
			"        \"tabWidth\": 4",
			"      }",
			"    },",
			"    {",
			"      \"files\": \"*.md\",",
			"      \"options\": {",
			"        \"parser\": \"markdown\",",
			"        \"tabWidth\": 4",
			"      }",
			"    }",
			"  ]",
			"}"
		],
		"description": "Prettier configuration with Tailwind CSS plugin"
	}
}