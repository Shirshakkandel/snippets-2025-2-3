{
	"Concurrent Dev Scripts": {
		"prefix": "concurrentlyFrontendBackend",
		"body": [
			"\"dev\": \"concurrently \\\"npm run dev-frontend\\\" \\\"npm run dev-backend\\\"\",",
			"\"dev-frontend\": \"cd frontend && pnpm run dev\",",
			"\"dev-backend\": \"cd backend && pnpm run dev\""
		],
		"description": "Add concurrent dev scripts for frontend and backend"
	},
	"Hono Install Script": {
		"prefix": "honoInstall",
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json",
		"body": [
			"// https://ui.shadcn.com/docs/installation/next",
			"//bun create hono@latest ${1:./}",
		],
		"description": "Install Hono using Bun"
	},
	"Bun Shadcn Install": {
		"prefix": "bunShadcnInstall",
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json",
		"body": [
			"// https://ui.shadcn.com/docs/installation/next",
			"//bun x shadcn@latest init -d && bun x shadcn@latest add"
		],
		"description": "Install Shadcn using Bun"
	},
	"Hono Build and Start": {
		"prefix": "honoBuildStart",
		"scope": "html,css,javascript,typescript,javascriptreact,typescriptreact,json",
		"body": [
			"// ${|bun,pnpm,npm,yarn|} add -D typescript",
			"//FILE=> tsconfig.json and package.json->script",
			"    \"outDir\": \"dist\",",
			"\"build\": \"tsc\",",
			"\"start\": \"node dist/index.js\""
		],
		"description": "Add build and start scripts for Hono project"
	},
	"Environment Variables Declaration": {
		"prefix": "envDtsHonoTelegramResend",
		"body": [
			"//  .env.d.ts",
			"declare namespace NodeJS {",
			"  interface ProcessEnv {",
			"    // General",
			"    PORT: string;",
			"    CLIENT_DOMAIN: string;",
			"    SERVER_DOMAIN: string;",
			"",
			"    // Database",
			"    MONGODB_URI: string;",
			"",
			"    // Better Auth",
			"    BETTER_AUTH_URL: string;",
			"    BETTER_AUTH_SECRET: string;",
			"",
			"    // OAuth",
			"    GOOGLE_CLIENT_ID: string;",
			"    GOOGLE_CLIENT_SECRET: string;",
			"",
			"    // Telegram",
			"    TELEGRAM_TOKEN: string;",
			"",
			"    // Paypal",
			"    PAYPAL_WEBHOOK_ID: string;",
			"    PAYPAL_CLIENT_ID: string;",
			"    PAYPAL_SECRET_KEY: string;",
			"",
			"    // Paddle",
			"    PADDLE_API_KEY: string;",
			"    PADDLE_PRODUCT_ID: string;",
			"    PADDLE_SUBSCRIPTION_WEBHOOK_SECRET_KEY: string;",
			"",
			"    // Resend",
			"    RESEND_API_KEY: string;",
			"  }",
			"}"
		],
		"description": "TypeScript declaration for environment variables including Telegram and Resend"
	},
	"Environment Variables for Hono Project": {
		"prefix": "envHonoTelegramResend",
		"body": [
			"# General",
			"PORT=8080",
			"CLIENT_DOMAIN=https://localhost:3000",
			"# CLIENT_DOMAIN=*",
			"SERVER_DOMAIN=http://localhost:8080",
			"",
			"# Database",
			"MONGODB_URI=mongodb://localhost:27017/group-gains",
			"",
			"# Better Auth",
			"BETTER_AUTH_URL=http://localhost:8080",
			"BETTER_AUTH_SECRET=br8dl1Wk9qCpPDAhdr0tiLS99FfQ4ukE",
			"",
			"# OAuth",
			"GOOGLE_CLIENT_ID=",
			"GOOGLE_CLIENT_SECRET=",
			"",
			"# Telegram",
			"TELEGRAM_TOKEN=7662715527:AAG0QIAhGMot5nW8RilxuxJj71gxFyBoiP8",
			"",
			"# Paypal",
			"PAYPAL_WEBHOOK_ID=",
			"PAYPAL_CLIENT_ID=",
			"PAYPAL_SECRET_KEY=",
			"",
			"# Paddle",
			"PADDLE_API_KEY=",
			"PADDLE_PRODUCT_ID=",
			"PADDLE_SUBSCRIPTION_WEBHOOK_SECRET_KEY=",
			"",
			"# Resend",
			"RESEND_API_KEY="
		],
		"description": "Environment variables for Hono project with Better Auth configuration"
	},
	"Package Manager Placeholder": {
		"prefix": "packageManager",
		"body": [
			"\\${1|bun,pnpm,npm,yarn|}"
		],
		"description": "Snippet to insert a placeholder for selecting a package manager"
	},
	"Hono Port Configuration": {
		"prefix": "honoPort",
		"body": [
			"//${1|bun,pnpm,npm,yarn|} add dotenv",
			"import 'dotenv/config';",
			"const port = Number(process.env.PORT) || 8080;"
		],
		"description": "Snippet to configure the port using dotenv in a Hono application"
	},
	"Hono Environment Variables for Telegram Bot": {
		"prefix": "honoEnvTsTelegramBot",
		"body": [
			"export const MONGODB_URI = process.env.MONGODB_URI || '';",
			"",
			"export const CLIENT_DOMAIN = process.env.CLIENT_DOMAIN || '';",
			"export const SERVER_DOMAIN = process.env.SERVER_DOMAIN || '';",
			"",
			"export const GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET || '';",
			"export const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID || '';",
			"// Paypal",
			"export const PAYPAL_CLIENT_ID = process.env.PAYPAL_CLIENT_ID || '';",
			"export const PAYPAL_SECRET_KEY = process.env.PAYPAL_SECRET_KEY || '';",
			"export const PAYPAL_WEBHOOK_ID = process.env.PAYPAL_WEBHOOK_ID || '';",
			"",
			"// Paddle",
			"export const PADDLE_API_KEY = process.env.PADDLE_API_KEY || '';",
			"export const PADDLE_PRODUCT_ID = process.env.PADDLE_PRODUCT_ID || '';",
			"",
			"export const PADDLE_SUBSCRIPTION_WEBHOOK_SECRET_KEY =",
			"  process.env.PADDLE_SUBSCRIPTION_WEBHOOK_SECRET_KEY || '';"
		],
		"description": "Snippet for environment variables setup in a Hono Telegram Bot"
	},
	"Hono Error Middleware": {
		"prefix": "HonoErrorMiddleware",
		"body": [
			"//https://hono.dev/docs/api/exception",
			"import { AxiosError } from 'axios';",
			"import type { Context } from 'hono';",
			"import { HTTPException } from 'hono/http-exception';",
			"import type { HTTPResponseError } from 'hono/types';",
			"import type { ContentfulStatusCode } from 'hono/utils/http-status';",
			"",
			"interface ErrorResponse {",
			"  error: string;",
			"  success: boolean;",
			"  message: string;",
			"  result: any; // For additional error context, if needed",
			"}",
			"",
			"//TIME::1:42:50",
			"//https://hono.dev/docs/api/exception#handling-httpexception",
			"const errorHandler = async (err: Error | HTTPResponseError, c: Context) => {",
			"  // Log the error details",
			"  console.error('Caught error in error handler:', err);",
			"",
			"  let response: ErrorResponse;",
			"",
			"  // Check for specific error types",
			"  if (err instanceof ValidationError) {",
			"    // Custom validation error response",
			"    response = {",
			"      success: false,",
			"      error: 'Validation Error',",
			"      message: err.message,",
			"      result: err.details, // Add field-specific details if available",
			"    };",
			"    return c.json(response, err.status);",
			"  }",
			"",
			"  if (err instanceof AxiosError) {",
			"    response = {",
			"      success: false,",
			"      error: 'External API Error',",
			"      message: err.response?.data?.message || err.message,",
			"      result: err.response?.data || null,",
			"    };",
			"",
			"    const statusCode = (err.status as ContentfulStatusCode) || 500;",
			"",
			"    return c.json(response, { status: statusCode });",
			"  }",
			"",
			"  if (err instanceof SyntaxError) {",
			"    // Handle syntax errors (e.g., invalid JSON payloads)",
			"    response = {",
			"      success: false,",
			"      error: 'Bad Request',",
			"      message: 'Invalid JSON syntax in the request body.',",
			"      result: null,",
			"    };",
			"    return c.json(response, { status: 400 });",
			"  }",
			"",
			"  // Generic fallback error for unexpected issues",
			"  response = {",
			"    success: false,",
			"    error: 'Internal Server Error',",
			"    message:",
			"      'Something went wrong on our end. Please check result for more info.',",
			"    result: err,",
			"  };",
			"  return c.json(response, { status: 500 });",
			"};",
			"",
			"// Custom ValidationError class",
			"/**",
			" * Represents a validation error that extends the `HTTPException` class.",
			" * This error is used to indicate validation failures with additional details.",
			" *",
			" * @property details - A record containing specific details about the validation error.",
			" * @property message - A descriptive message about the validation error.",
			" *",
			" * @constructor",
			" * @param message - The error message describing the validation failure.",
			" * @param details - Additional details about the validation error, defaulting to an empty object.",
			" * @param statusCode - The HTTP status code for the error, defaulting to 500.",
			" */",
			"export class ValidationError extends HTTPException {",
			"  details: Record<string, any>;",
			"  message: string;",
			"",
			"  constructor(",
			"    message: string,",
			"    details: Record<string, any> = {},",
			"    statusCode: ContentfulStatusCode = 500",
			"  ) {",
			"    const errorResponse = new Response(",
			"      JSON.stringify({",
			"        error: 'Validation Error',",
			"        message,",
			"        details,",
			"      }),",
			"      {",
			"        status: statusCode,",
			"      }",
			"    );",
			"    // https://hono.dev/docs/api/exception#throw-httpexception",
			"    super(statusCode, { res: errorResponse });",
			"    this.details = details;",
			"    this.message = message;",
			"  }",
			"}",
			"",
			"export default errorHandler;"
		],
		"description": "Hono Error Middleware with comments"
	}
}