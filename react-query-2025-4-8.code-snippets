{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"RTQProviders Component": {
		"prefix": "RtqQueryProviderNextjs",
		"scope": "javascriptreact,typescriptreact,json",
		"body": [
			"//https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr#server-components--nextjs-app-router",
			"// In Next.js, this file would be called: app/providers.tsx",
			"'use client';",
			"",
			"// Since QueryClientProvider relies on useContext under the hood, we have to put 'use client' on top",
			"import {",
			"  isServer,",
			"  QueryClient,",
			"  QueryClientProvider,",
			"} from '@tanstack/react-query';",
			"",
			"function makeQueryClient() {",
			"  return new QueryClient({",
			"    defaultOptions: {",
			"      queries: {",
			"        // With SSR, we usually want to set some default staleTime",
			"        // above 0 to avoid refetching immediately on the client",
			"        staleTime: 60 * 1000,",
			"      },",
			"    },",
			"  });",
			"}",
			"",
			"let browserQueryClient: QueryClient | undefined = undefined;",
			"",
			"function getQueryClient() {",
			"  if (isServer) {",
			"    // Server: always make a new query client",
			"    return makeQueryClient();",
			"  } else {",
			"    // Browser: make a new query client if we don't already have one",
			"    // This is very important, so we don't re-make a new client if React",
			"    // suspends during the initial render. This may not be needed if we",
			"    // have a suspense boundary BELOW the creation of the query client",
			"    if (!browserQueryClient) browserQueryClient = makeQueryClient();",
			"    return browserQueryClient;",
			"  }",
			"}",
			"",
			"export default function RTQProviders({",
			"  children,",
			"}: {",
			"  children: React.ReactNode;",
			"}) {",
			"  // NOTE: Avoid useState when initializing the query client if you don't",
			"  //       have a suspense boundary between this and the code that may",
			"  //       suspend because React will throw away the client on the initial",
			"  //       render if it suspends and there is no boundary",
			"  const queryClient = getQueryClient();",
			"",
			"  return (",
			"    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>",
			"  );",
			"}"
		],
		"description": "RTQProviders component setup for Next.js applications using React Query."
	}
}