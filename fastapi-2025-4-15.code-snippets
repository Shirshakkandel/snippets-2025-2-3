{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"FastAPI App with Placeholders": {
		"prefix": "fastapiApp",
		"body": [
			"# poetry add fastapi[standard] ",
			"# fastapi dev main.py ",
			"from fastapi import FastAPI",
			"",
			"app = FastAPI(title=\"${1:My fast Api!}\", description=\"${2:This is my cool API!}\")",
			"",
			"@app.get(\"/${3:hello-world}\")",
			"def ${4:hello}():",
			"    return {\"Message\": \"${5:Hello world!}\"}"
		],
		"description": "Create a FastAPI application with customizable title, description, endpoint, and function name"
	},
	"Pydantic Class with import": {
		"prefix": "pydanticClassImport",
		"body": [
			"from pydantic import BaseModel",
			"",
			"class ${1:ClassName}(BaseModel):",
			"    ${2:field_name}: ${3:str}"
		],
		"description": "Create a Pydantic class"
	},
	"Pydantic Class": {
		"prefix": "pydanticClass",
		"body": [
			"from pydantic import BaseModel,Field",
			"",
			"class ${1:ClassName}(BaseModel):",  
			"    ${2:field_name}: ${3:str}"
		],
		"description": "Create a Pydantic class"
	},
	"FastAPI General APIRouter Snippet": {
		"prefix": "routerFastapi",
		"body": [
			"from pydantic import BaseModel",
			"from fastapi import APIRouter",
			"",
			"router = APIRouter(${1:prefix=\"/${2:prefix}\"})",
			"",
			"class ${3:RequestModel}(BaseModel):",
			"    ${4:field1}: ${5:str}",
			"    ${6:field2}: ${7:int}",
			"",
			"@router.${8:post}(\"/${9:endpoint}\")",
			"${10:async} def ${11:handler_function}(${12:payload}: ${3:RequestModel}):",
			"    return {\"message\": f\"${13:Response for }{${14:payload}.${4:field1}}\"}"
		],
		"description": "General FastAPI APIRouter template for reuse in any router"
	},
	"FastAPI Router Import": {
		"prefix": "routerImportFast",
		"body": [
			"from routes.${1:router_def} import router as ${1:router_def}",
			"app.include_router(${1:router_def})"
		],
		"description": "Import a FastAPI router with a customizable module path"
	},
	"Pydantic Model Structure": {
		"prefix": "pydantic",
		"scope": "python",
		"body": [
			"from pydantic import BaseModel, EmailStr",
			"from typing import Optional",
			"",
			"class ${1:ModelName}(BaseModel):",
			"    ${2:field_name}: ${3:FieldType} = ${4:default_value}",
			"",
			"new_${5:instance} = {${6:field_name}: ${7:value}}",
			"${5:instance} = ${1:ModelName}(**new_${5:instance})",
			"print(${5:instance})"
		],
		"description": "Create a Pydantic model structure with placeholders"
	}
}