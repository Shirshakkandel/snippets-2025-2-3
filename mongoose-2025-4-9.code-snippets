{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Mongoose Find Descending Sort": {
		"prefix": "mongooseFindDescSort",
		"scope": "javascript,typescript",
		"body": [
			"const ${1:groups} = await ${2:Group}.find({ owner: user.id }).sort({",
			"  createdAt: -1,",
			"});"
		],
		"description": "Mongoose find with descending sort on createdAt"
	},
	"Mongoose Find One": {
		"prefix": "mongooseFindOne",
		"body": [
			"const ${1:groupInfo} = await ${2:Group}.findOne({${3|_id,owner|}: ${4|body.id,user.id|} });"
		],
		"description": "Mongoose findOne with customizable variable, model, and ID"
	},
	"Mongo FindOneAndUpdate": {
		"prefix": "mongoFindOneUpdate",
		"body": [
			"let ${1:integration} = await ${2:Integration}.findOneAndUpdate(",
			"  { owner: user.id },",
			"  {",
			"    paypal: {",
			"      email: email,",
			"    },",
			"  },",
			"  { new: true },",
			");"
		],
		"description": "Snippet for MongoDB findOneAndUpdate operation"
	}
}