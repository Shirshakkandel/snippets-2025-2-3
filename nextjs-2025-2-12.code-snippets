{
	"0. Install Nextjs application": {
		"scope": "javascriptreact,typescriptreact,json,bash",
		"prefix": "nextjsInstall",
		"body": [
			"// ${1|pnpx,npx,yarn|} create-next-app@latest ${2:./}  --typescript --tailwind --eslint --src-dir ${3:--turbopack} --app "
		],
		"description": "Install nextjs latest version first tab for package manager and second tab for folder ./ is for current folder"
	},
	"0. shadcn install": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact,json,bash",
		"prefix": "shadcnInstall",
		"body": [
			"// ${1|pnpx,npx,yarn|} shadcn@latest init ${2:-d} && ${1} shadcn@latest add "
		],
		"description": "Install nextjs latest version first tab for package manager and second tab for folder ./ is for current folder"
	},
	"1.Next.js Dynamic Page": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "nextDynamicPage",
		"body": [
			"",
			"",
			"type Props = {",
			"  params: Promise<{",
			"   ${1:slug}: string;",
			"  }>;",
			"};",
			"",
			"//COMPONENT::Page",
			"export default async function Page({ params }: Props) {",
			"//SECTION::LOGIC PART",
			"  const {${1:slug}} = await params;",
			"",
			"//SECTION::UI PART",
			"  return <div>{${1:slug}}</div>;",
			"}"
		],
		"description": "Create a Next.js dynamic page component with a slug parameter"
	},
	"2.Version 14  Next.js Dynamic Page": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "nextDynamicPageV14",
		"body": [
			"type Props = {",
			"  params: {",
			"   ${1:slug}: string;",
			"  };",
			"};",
			"",
			"export default async function Page({ params }: Props) {",
			"  const {${1:slug}} =  params;",
			"  return <div>{${1:slug}}</div>;",
			"}"
		],
		"description": "Create a Next.js dynamic page component with a slug parameter"
	},
	"3. PropsComponent": {
		"prefix": "ComponentProps",
		"body": [
			"\"use client\"",
			"",
			"type ${TM_FILENAME_BASE}Props = {",
			"  ${2:code}: string;",
			"};",
			"",
			"export default function ${TM_FILENAME_BASE}({ ${2:code} }:${TM_FILENAME_BASE}Props) {",
			"  //SECTION::LOGIC PART",
			"  //SECTION::UI PART",
			"  return <div>{${2:code}}</div>;",
			"}"
		],
		"description": "Generates a Props component with a dynamic filename"
	},
	"4. Image Component": {
		"prefix": "nextImage",
		"body": [
			"<Image src=\"/${1:logo.png}\" width=\"${2:200}\" height=\"${3:200}\" alt=\"${4:Logo}\"   className='aspect-[${5:1867/544}]'  />"
		],
		"description": "Insert an Image component with customizable src, width, height, and alt attributes"
	},
	"5.Product Layout": {
		"prefix": "layout",
		"body": [
			"export default ${1:async} function ${2:LayoutName}Layout({",
			"  children,",
			"}: {",
			"  children: React.ReactNode;",
			"}) {",
			"    //SECTION::LOGIC PART",
			"    ${3:// Add logic here}",
			"\n    //SECTION::UI PART",
			"  return <section>",
			"    {children}",
			"  </section>;",
			"}"
		],
		"description": "Creates a  Layout component with a customizable product name and logic section."
	},
	"6.Component Page": {
		"prefix": "component",
		"body": [
			"${1:\"use client\";}",
			"\nexport default ${2:async} function ${TM_FILENAME_BASE}() {",
			"  //SECTION LOGIC PART",
			"  ${4:// Add logic here}",
			"\n  //SECTION::UI PART",
			"  return <div>${TM_FILENAME_BASE}</div>;",
			"}"
		],
		"description": "Creates a  component where 'use client' is optional, and async & function name are customizable."
	},
	"Component with props": {
		"prefix": "componentTwMergeProps",
		"body": [
			"${1:\"use client\";}",
			"import { HTMLAttributes, ButtonHTMLAttributes } from \"react\";",
			"import { twMerge } from \"tailwind-merge\";",
			"",
			"type Props = {} & ${2|HTMLAttributes<HTMLDivElement>,ButtonHTMLAttributes<HTMLButtonElement>|};",
			"",
			"export default function ${TM_FILENAME_BASE}(props: Props) {",
			"    //SECTION LOGIC PART",
			"    const { className, children, ...otherProps } = props;",
			"",
			"    //SECTION::UI PART",
			"    return (",
			"        <${3|div,button|} className={twMerge(\"\", className)} {...otherProps}>",
			"            ${4|Key,{children}|}",
			"        </${3|div,button|}>",
			"    );",
			"}"
		],
		"description": "Creates a component with props"
	},
	"Component with CVA": {
		"prefix": "componentPropsCva",
		"body": [
			"'use client';",
			"import { HTMLAttributes, ButtonHTMLAttributes } from \"react\";",
			"import { cva } from 'class-variance-authority';",
			"",
			"export type ${TM_FILENAME_BASE}Props = {",
			"  variant?: 'primary' | 'secondary';",
			"} & ${2|HTMLAttributes<HTMLDivElement>,ButtonHTMLAttributes<HTMLButtonElement>|};",
			"",
			"const classes = cva('', {",
			"  variants: {",
			"    variant: {",
			"      primary: '',",
			"      secondary: '',",
			"    },",
			"  },",
			"  defaultVariants: {",
			"    variant: 'primary',",
			"  },",
			"});",
			"",
			"export default function ${TM_FILENAME_BASE}(props: ${TM_FILENAME_BASE}Props) {",
			"  //SECTION LOGIC PART",
			"  const { className, children, variant, ...otherProps } = props;",
			"",
			"  //SECTION::UI PART",
			"  return (",
			"    <${3|div,button|} className={classes({ variant, className, ...otherProps })}>",
			"            ${4|Key,{children}|}",
			"    </${3|div,button|}>",
			"  );",
			"}",
			"",
			"// satisfies {",
			"//   name: string;",
			"//   href: string;",
			"//   ${TM_FILENAME_BASE}Variant: ${TM_FILENAME_BASE}Props['variant'];",
			"// }[];"
		],
		"description": "Create a component with CVA and dynamic name based on file name"
	},
	"SectionContent Component": {
		"prefix": "compoSectionContainerProps",
		"body": [
			"\"use client\";",
			"import { HTMLAttributes } from \"react\";",
			"import { twMerge } from \"tailwind-merge\";",
			"type Props = {",
			"  className?: string;",
			"} & HTMLAttributes<HTMLDivElement>;",
			"",
			"export default function ${TM_FILENAME_BASE}(props: Props) {",
			"  //SECTION LOGIC PART",
			"  // Add logic here",
			"  const { className, ...otherProps } = props;",
			"  //SECTION::UI PART",
			"  return (",
			"    <div",
			"      className={twMerge(",
			"        \"container py-24 md:py-36 lg:py-48 overflow-hidden\",",
			"        className",
			"      )}",
			"      {...otherProps}",
			"    />",
			"  );",
			"}"
		],
		"description": "Creates a SectionContent component with the file name as the component name."
	},
	"7.Next.js Font with Tailwind": {
		"prefix": "nextjsFontTailwind",
		"scope": "javascriptreact,typescriptreact",
		"body": [
			"import { ${1:Archivo} } from \"next/font/google\";",
			"",
			"const ${2:archivo} = ${1:Archivo}({",
			"  display: \"swap\",",
			"  weight: \"variable\",",
			"  subsets: [\"latin\"],",
			"  variable: \"--font-${2:archivo}\",",
			"});",
			"",
			"//body ${${2:archivo}.variable} font-${3:sans}",
			"",
			"// tailwind.config.ts",
			"// extend: {",
			"//   fontFamily: {",
			"//     ${3:sans}: \"var(--font-${2:archivo})\",",
			"//   },",
			"// },"
		],
		"description": "Insert Next.js font configuration with Tailwind CSS integration."
	},
	"Next.js ESLint Config with Comments": {
		"prefix": "nextjsEslintConfig",
		"body": [
			"//.eslintrc.json",
			"",
			"// {",
			"//     \"extends\": \"next\"",
			"//   }",
			"",
			"//eslint.config.mjs",
			"//https://nextjs.org/docs/pages/api-reference/config/eslint#disabling-rules",
			"import { FlatCompat } from \"@eslint/eslintrc\";",
			"",
			"const compat = new FlatCompat({",
			"  // import.meta.dirname is available after Node.js v20.11.0",
			"  baseDirectory: import.meta.dirname,",
			"});",
			"",
			"const eslintConfig = [",
			"  ...compat.config({",
			"    extends: [\"next\"],",
			"    rules: {",
			"      \"react/no-unescaped-entities\": \"off\",",
			"      \"@next/next/no-page-custom-font\": \"off\",",
			"      \"@typescript-eslint/no-unused-vars\": \"off\",",
			"    },",
			"  }),",
			"];",
			"",
			"export default eslintConfig;"
		],
		"description": "ESLint configuration for Next.js projects with comments and link"
	},
	"Import Google Fonts in Nextjs": {
		"prefix": "fontsSansSerif",
		"body": [
			"import { ${1|Inter,Calistoga,Archivo|}, ${2|Inter,Calistoga,Archivo|} } from 'next/font/google';",
			"",
			"const ${3:inter} = ${1}({ subsets: ['latin'], variable: '--font-sans' });",
			"",
			"const ${4:calistoga} = ${2}({",
			"  subsets: ['latin'],",
			"  variable: '--font-serif',",
			"  weight: ['400'],",
			"});",
			"",
		],
		"description": "Import Google Fonts and initialize with metadata in Next.js"
	},
	"Import Google San serif Fonts with Next.js": {
		"prefix": "fontSanNextjs",
		"body": [
			"import { Sora, Space_Grotesk, Inter, Archivo } from \"next/font/google\";"
		],
		"description": "Import Google Fonts with Next.js"
	}
}