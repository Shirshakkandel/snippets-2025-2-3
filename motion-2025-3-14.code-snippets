{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"1. Motion value example": {
		"prefix": "motionUseMotionExample",
		"scope": "",
		"body": [
			"import { useMotionValue, motion } from '${1|motion-react,framer-motion|}';",
			"",
			"const App = () => {",
			"  const scale = useMotionValue(0);",
			"",
			"  return <motion.div style={{ scale }} />;",
			"};",
			"",
			"export default App;"
		],
		"description": "Create a Framer Motion component with a motion value"
	},
	"2.Motion Spilt type Animation": {
		"prefix": "motionSpiltTypeAnimation",
		"body": [
			"//   import SplitType from \"split-type\";",
			"// import { useAnimate, motion } from \"motion/react\";",
			"// import { stagger } from \"motion\";",
			"const [titleScope, titleAnimate] = useAnimate();",
			"",
			"useEffect(() => {",
			"  new SplitType(titleScope.current, {",
			"    types: \"lines,words\",",
			"    tagName: \"span\",",
			"  });",
			"",
			"  titleAnimate(",
			"    titleScope.current.querySelectorAll(\".word\"),",
			"    {",
			"      transform: \"translateY(0)\",",
			"    },",
			"    {",
			"      duration: 0.5,",
			"      delay: stagger(0.2),",
			"    }",
			"  );",
			"}, []);"
		],
		"description": "Snippet for Hero section animation logic with comments"
	},
	"Button Component with Motion Micro Interaction": {
		"prefix": "buttonMotionMicroInteraction",
		"scope": "javascript,typescript,javascriptreact,typescriptreact,json",
		"body": [
			"// https://www.youtube.com/watch?v=zqXyCteRQdg&t=19804s&ab_channel=FrontendTribe",
			"\"use client\";",
			"",
			"import { HTMLAttributes, useEffect, useState } from \"react\";",
			"import { cva } from \"class-variance-authority\";",
			"import {",
			"  animate,",
			"  motion,",
			"  useMotionTemplate,",
			"  useMotionValue,",
			"} from \"framer-motion\";",
			"",
			"export type ButtonProps = {",
			"  block?: boolean;",
			"  variant?: \"primary\" | \"secondary\" | \"tertiary\";",
			"} & HTMLAttributes<HTMLButtonElement>;",
			"",
			"const borderGradient =",
			"  \"border-2 border-transparent [background:linear-gradient(var(--color-gray-950),var(--color-gray-950))_padding-box,conic-gradient(from_45deg,var(--color-violet-400),var(--color-fuchsia-400),var(--color-teal-400),var(--color-violet-400))_border-box] relative\";",
			"",
			"const classes = cva(",
			"  \"text-xs tracking-widest uppercase font-bold h-10 px-6 rounded-lg \",",
			"  {",
			"    variants: {",
			"      block: {",
			"        true: \"w-full\",",
			"      },",
			"      variant: {",
			"        primary: borderGradient,",
			"        secondary: \"bg-gray-100 text-gray-900 \",",
			"        tertiary: \"bg-gray-800 text-gray-200\",",
			"      },",
			"    },",
			"    defaultVariants: {",
			"      variant: \"primary\",",
			"      block: false,",
			"    },",
			"  }",
			");",
			"",
			"export default function Button(props: ButtonProps) {",
			"  const {",
			"    className = \"\",",
			"    children,",
			"    variant = \"primary\",",
			"    ...otherProps",
			"  } = props;",
			"  const [isHovered, setIsHovered] = useState(false);",
			"  const angle = useMotionValue(45);",
			"  const background = useMotionTemplate`linear-gradient(var(--color-gray-950),var(--color-gray-950)) padding-box, conic-gradient(from ${angle}deg,var(--color-violet-400),var(--color-fuchsia-400),var(--color-teal-400),var(--color-violet-400)) border-box`;",
			"  useEffect(() => {",
			"    if (isHovered) {",
			"      animate(angle, angle.get() + 360, {",
			"        duration: 1,",
			"        ease: \"linear\",",
			"        repeat: Infinity,",
			"      });",
			"    } else {",
			"      animate(angle, 45, { duration: 0.5 });",
			"    }",
			"  }, [isHovered, angle]);",
			"",
			"  return (",
			"    <motion.button",
			"      onMouseEnter={() => setIsHovered(true)}",
			"      onMouseLeave={() => setIsHovered(false)}",
			"      className={classes({ ...otherProps, variant, className })}",
			"      style={",
			"        variant === \"primary\"",
			"          ? {",
			"              background: background,",
			"            }",
			"          : undefined",
			"      }",
			"    >",
			"      {children}",
			"    </motion.button>",
			"  );",
			"}"
		],
		"description": "A Button component with motion micro-interaction using Framer Motion."
	},
	"4. Animate Function Call": {
		"prefix": "motionAnimate",
		"body": [
			"${1:animate}(${2:scope}.current, { ${3:opacity}: ${4:1} }, { duration: ${5:0.5} })"
		],
		"description": "Snippet for animate function call with placeholders"
	},
	"Animate sequence": {
		"prefix": "motionAnimateSequence",
		"body": [
			"${1:leftPointerAnimate}([",
			"  [${2:leftPointerScope}.current, { ${3:opacity}: 1 }, { duration: 0.5 }],",
			"  [${2:leftPointerScope}.current, { y: 0, x: -100 }, { duration: 0.5, ease: 'easeInOut' }],",
			"]);"
		],
		"description": "Snippet for leftPointerAnimate function call with placeholders"
	},
	"Logo Ticker Component": {
		"prefix": "logoTickerComponent",
		"body": [
			"'use client';",
			"import quantumLogo from '@/assets/images/quantum.svg';",
			"import acmeLogo from '@/assets/images/acme-corp.svg';",
			"import echoValleyLogo from '@/assets/images/echo-valley.svg';",
			"import pulseLogo from '@/assets/images/pulse.svg';",
			"import outsideLogo from '@/assets/images/outside.svg';",
			"import apexLogo from '@/assets/images/apex.svg';",
			"import celestialLogo from '@/assets/images/celestial.svg';",
			"import twiceLogo from '@/assets/images/twice.svg';",
			"import Image from 'next/image';",
			"import React from 'react';",
			"import { motion } from 'framer-motion';",
			"",
			"const logos = [",
			"  { name: 'Quantum', image: quantumLogo },",
			"  { name: 'Acme Corp', image: acmeLogo },",
			"  { name: 'Echo Valley', image: echoValleyLogo },",
			"  { name: 'Pulse', image: pulseLogo },",
			"  { name: 'Outside', image: outsideLogo },",
			"  { name: 'Apex', image: apexLogo },",
			"  { name: 'Celestial', image: celestialLogo },",
			"  { name: 'Twice', image: twiceLogo },",
			"];",
			"",
			"export default function LogoTicker() {",
			"  return (",
			"    <section className=\"overflow-x-clip py-24\">",
			"      <div className=\"container\">",
			"        <h3 className=\"text-center text-xl text-white/50\">",
			"          Already chosen by these market leaders",
			"        </h3>",
			"",
			"        <div className=\"mt-12 flex overflow-hidden [mask-image:linear-gradient(to_right,transparent,black_10%,black_90%,transparent)]\">",
			"          <motion.div",
			"            animate={{ x: '-50%' }}",
			"            transition={{",
			"              duration: 30,",
			"              ease: 'linear',",
			"              repeat: Infinity,",
			"            }}",
			"            className=\"flex flex-none gap-24 pr-24\"",
			"          >",
			"            {Array.from({ length: 2 }).map((_, i) => (",
			"              <React.Fragment key={i}>",
			"                {logos.map(logo => (",
			"                  <Image",
			"                    src={logo.image}",
			"                    key={logo.name}",
			"                    alt={logo.name}",
			"                  />",
			"                ))}",
			"              </React.Fragment>",
			"            ))}",
			"          </motion.div>",
			"        </div>",
			"      </div>",
			"    </section>",
			"  );",
			"}"
		],
		"description": "Snippet for LogoTicker component"
	},
	"Scroll and Transform Hook Setup": {
		"prefix": "useScrollTransformSetup",
		"body": [
			"const scrollTarget = useRef<HTMLDivElement>(null);",
			"const { scrollYProgress } = useScroll({",
			"  target: scrollTarget,",
			"  offset: ['start end', 'end end'],",
			"});",
			"",
			"const wordIndex = useTransform(",
			"  scrollYProgress,",
			"  [0, 1],",
			"  [0, ${1:words.length}],",
			");"
		],
		"description": "Snippet for setting up scroll and transform hooks"
	},
	"AnimatePresence with Motion Div": {
		"prefix": "AnimatePresenceMotion",
		"body": [
			"<AnimatePresence>",
			"  {${1:selectedIndex} === ${2:index} && (",
			"    <motion.div",
			"      initial={{",
			"        height: 0,",
			"        marginTop: 0,",
			"      }}",
			"      animate={{",
			"        height: 'auto',",
			"        marginTop: 24,",
			"      }}",
			"      exit={{",
			"        height: 0,",
			"        marginTop: 0,",
			"      }}",
			"      className={twMerge('overflow-hidden')}",
			"    >",
			"      $3",
			"    </motion.div>",
			"  )}",
			"</AnimatePresence>"
		],
		"description": "Snippet for AnimatePresence with motion.div and conditional rendering"
	},
	"Motion Props": {
		"prefix": "motionProps",
		"body": [
			"initial={{",
			"  $1",
			"}}",
			"animate={{",
			"  $2",
			"}}",
			"transition={{",
			"  $3",
			"}}"
		],
		"description": "Snippet for motion props with placeholders for initial, animate, and transition"
	}
}